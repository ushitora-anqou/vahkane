// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package=discord -destination=mock_client.go
//

// Package discord is a generated GoMock package.
package discord

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DeleteGuildCommand mocks base method.
func (m *MockClient) DeleteGuildCommand(ctx context.Context, guildID, commandID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGuildCommand", ctx, guildID, commandID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGuildCommand indicates an expected call of DeleteGuildCommand.
func (mr *MockClientMockRecorder) DeleteGuildCommand(ctx, guildID, commandID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGuildCommand", reflect.TypeOf((*MockClient)(nil).DeleteGuildCommand), ctx, guildID, commandID)
}

// GetGuildCommands mocks base method.
func (m *MockClient) GetGuildCommands(ctx context.Context, guildID string) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuildCommands", ctx, guildID)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuildCommands indicates an expected call of GetGuildCommands.
func (mr *MockClientMockRecorder) GetGuildCommands(ctx, guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuildCommands", reflect.TypeOf((*MockClient)(nil).GetGuildCommands), ctx, guildID)
}

// RegisterGuildCommand mocks base method.
func (m *MockClient) RegisterGuildCommand(ctx context.Context, guildID, commandsJSON string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterGuildCommand", ctx, guildID, commandsJSON)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterGuildCommand indicates an expected call of RegisterGuildCommand.
func (mr *MockClientMockRecorder) RegisterGuildCommand(ctx, guildID, commandsJSON any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGuildCommand", reflect.TypeOf((*MockClient)(nil).RegisterGuildCommand), ctx, guildID, commandsJSON)
}

// SendFollowupMessage mocks base method.
func (m *MockClient) SendFollowupMessage(ctx context.Context, interactionToken, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFollowupMessage", ctx, interactionToken, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFollowupMessage indicates an expected call of SendFollowupMessage.
func (mr *MockClientMockRecorder) SendFollowupMessage(ctx, interactionToken, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFollowupMessage", reflect.TypeOf((*MockClient)(nil).SendFollowupMessage), ctx, interactionToken, message)
}
